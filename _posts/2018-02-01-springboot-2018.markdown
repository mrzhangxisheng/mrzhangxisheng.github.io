---
layout:     post
title:      "spring boot搭建学习笔记"
subtitle:   " \"spring boot搭建笔记\""
date:       2018-02-01 16:27:00
author:     "Zhangxs"
header-img: "null.jpg"
catalog: true
tags:
    - 技术
---



## 概述
Spring boot架构搭建时的笔记


<p id = "build"></p>
---

## 博文

1、首先搭建maven项目
---
 pom.xml如下。

主要包引入

```

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.10.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>
```

热部署包引入

```

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
	</dependency>
```


### 注解@RestController   @Controller类注解    

@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。

在@controller注解中，返回的是字符串，或者是字符串匹配的模板名称，即直接渲染视图，与html页面配合使用的，
在这种情况下，前后端的配合要求比较高，java后端的代码要结合html的情况进行渲染,使用model对象（或者modelandview）的数据将填充user视图中的相关属性，然后展示到浏览器，这个过程也可以称为渲染； 

@RequestMapping   Controller类映射(方法跟类映射)

@restcontroller中，返回的应该是一个对象，即return一个user对象，这时，在没有页面的情况下，也能看到返回的是一个user对象对应的json字符串，而前端的作用是利用返回的json进行解析渲染页面，java后端的代码比较自由。



### 配置文件application.properties     
配置文件值的拿取 @Value(value="${roncoo.secret}")

配置随机值添加

```

     roncoo.secret=${random.value}  //32位随机数
     roncoo.secret=${random.int}    //随机整数
	在main/resources/META-INF/additional-spring-config-metadata.json文件添加
	{"properties":[{
	 "name" : "roncoo.secret",
	 "type" : "java.lang.String",
	 "description" : "A description for 'roncoo.secret'"
	}]}

```




```

	端口配置
	server-port :8090
	时间格式配置
	spring.jackson.date.format=yyyy-MM-dd HH:mm:ss
	时区
	spring.jackson.time.zone=Asia/BeiJing

```

### 配置文件优先级

1、当前目录下的一个/config子目录

2、当期目录

3、一个classpath下的/config包

4、classpath模版路径（root）


### .properties配置文件激活及多环境配置

在主的配置文件中添加
spring.profiles.active=test
这样就会激活application_test.properties(新建) 配置文件 

#### jar 的直接启动也可以多环境启动
java -jar jar包路径 --spring.profiles.active=test(test:用application_test.properties文件启动)



.yml配置文件激活及多环境配置
这里不需要多个新建文件。只需要一个文件即可。
例：
```

	server:
	 port: 8080
	spring:
	 profiles:
	  active: pro//这里来切换环境
	
	---  //---3根横杠要加
	spring:
	 profiles: dev
	server:
	 port: 8080
	
	---
	spring:
	 profiles: test
	server:
	 port: 8081
	
	---
	spring:
	 profiles: pro
	server:
	 port: 8082

```


### logback_spring.xml 日志配置  spring boot自带logback
logging.config=classpath:logback-roncoo.xml
private static final Logger logger = LoggerFactory.getLogger("this Controller name .class")

##FreeMarker 模版引擎配置

```

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-freemarker</artifactId>
	</dependency>
```

java代码渲染

```

	public String index(ModeMap mvc){
		mvc.put("name",value);
		return "模版路径";//模版放在 resources/templates路径下  filename.ftl
	}
```
FreeMarker java配置文件

```
	import freemarker.template.TemplateException;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.context.annotation.Configuration;
	
	import javax.annotation.PostConstruct;
	import java.util.Locale;
	
	
	@Configuration
	public class FreeMarkerConfig {
	
	    @Autowired
	    protected freemarker.template.Configuration configuration;
	    @Autowired
	    protected org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver resolver;
	
	
	    @PostConstruct
	    public void  setSharedVariable(){
	
	        configuration.setDateFormat("yyyy-MM-dd");
	
	        configuration.setDateTimeFormat("yyyy-MM-dd HH:mm:ss");
	
	
	        // 设置freemarker模版编码
	        configuration.setDefaultEncoding("utf-8");
	        // url编码utf8
	        configuration.setURLEscapingCharset("utf-8");
	        // 如果变量为null,转化为空字符串,比如做比较的时候按照空字符做比较
	        configuration.setClassicCompatible(true);
	        // 去掉多余的空格,非常有用
	        configuration.setWhitespaceStripping(true);
	        // 中国
	        configuration.setLocale(Locale.SIMPLIFIED_CHINESE);
	
	        configuration.setNumberFormat("0.###");
	
	       
	        /**
	         * setting配置
	         */
	        try {
	            configuration.setSetting("template_update_delay", "1");
	            configuration.setSetting("default_encoding", "UTF-8");
	        } catch (TemplateException e) {
	            e.printStackTrace();
	        }
	
	
	        /**
	        * 配置Freemarker视图解析器
	        */
	        //解析后缀为html的
	        resolver.setSuffix(".html");
	       // resolver.setSuffix(".ftl");
	        //是否缓存模板
	        resolver.setCache(false);
	        //为模板调用时，调用request对象的变量名
	        resolver.setRequestContextAttribute("request");
	    }
	
	}

```

### Thymeleaf  模版引擎配置
包引入
```

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-thymeleaf</artifactId>
	</dependency>
```

//java和html代码渲染

```

	public String index(ModeMap mvc){
		mvc.put("name",value);
		return "模版路径";//模版放在 resources/templates路径下  filename.html
	}
	//html
	<!DOCTYPE html><html xmlns:th="http://www.thymeleaf.org">
	<h1 th:text="${name}"></h1>
	</html>
```


### error 自定义错误页面 

#### 第一种、
定义controller实现ErrorController

```

	@Controller  //错误controller
	@RequestMapping(value="error")
	public class WebErrorController implements ErrorController{
	
		@Override
		public String getErrorPath() {
			return "error/error";
		}
	
		@RequestMapping
		public String error(){
			return getErrorPath();
		}
	}
	//java代码
		@RequestMapping("exception")
		public ModelAndView exception(ModelMap mvc){
			ModelAndView modelAndView =new ModelAndView();
			try{
				//int i=0/1;
				//int i=1/0;
			}catch(Exception e){//可根据不同的异常跳转不同的页面
				modelAndView.setViewName("error/error");//重定向页面
				return modelAndView;
			}
			modelAndView.addObject("name", "value");
			modelAndView.setViewName("index");//重定向页面
			return modelAndView;
		}
	
		
		@RequestMapping("exception1")
		public String exception1(ModelMap mvc){
			try{
				//int i=0/1;
				int i=1/0;
			}catch(Exception e){//可根据不同的异常跳转不同的页面
				return "redirect:error/error";//重定向页面
			}
			mvc.put("name", "value");
			return "redirect:index";//重定向页面
		}

```

在templates/error/下面创建错误页面


#### 第二种、定义异常统一处理

添加统一处理类。类上添加注解@ControllerAdvice

例：

controller代码	

```

	@RequestMapping("exception2")
	public Object exception2(){
		throw new RuntimeException("异常处理");//运行时异常
	}

```
异常处理类

```

	import org.springframework.web.bind.annotation.ControllerAdvice;
	import org.springframework.web.bind.annotation.ExceptionHandler;
	import org.springframework.web.bind.annotation.ResponseStatus;
	import org.springframework.web.servlet.ModelAndView;
	import org.springframework.http.HttpStatus;
	
	@ControllerAdvice
	public class ExceptionUnifyHandler {
		
		
		@ExceptionHandler({ RuntimeException.class })//异常配置  发生该RuntimeException异常时进入这方法 
		@ResponseStatus(HttpStatus.OK)
		public ModelAndView processException(RuntimeException runtimeException){
			ModelAndView mv  = new ModelAndView();
			mv.addObject("runtimeException", runtimeException.getMessage());//渲染异常消息
			mv.setViewName("/error/404");//templates/error/404.ftl||.html    后缀FreeMarker可以配置
			return mv;
		}
	
	}

```


### servlet  filter  listenter  
执行顺序
initListener-->FilerInit-->doFiler-->servlet-->destroyFiler-->destroyListener

#### servlet的使用


```

	import java.io.IOException;
	import javax.servlet.ServletException;
	import javax.servlet.http.HttpServlet;
	import javax.servlet.http.HttpServletRequest;
	import javax.servlet.http.HttpServletResponse;
	public class WebServlet extends HttpServlet{
		private static final long serialVersionUID = 1L;
		@Override
		protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
			System.out.println("doget");
			super.doGet(req, resp);
		}
		@Override
		protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
			System.out.println("dopost");
			super.doPost(req, resp);
		}
	}

```

#### filter的使用

```

	import java.io.IOException;
	import java.text.CharacterIterator;
	import javax.servlet.Filter;
	import javax.servlet.FilterChain;
	import javax.servlet.FilterConfig;
	import javax.servlet.ServletException;
	import javax.servlet.ServletRequest;
	import javax.servlet.ServletResponse;
	public class WebFilter implements Filter{
		@Override
		public void destroy() {
			System.out.println("destroy");//项目关闭是调用
		}
		@Override
		public void doFilter(ServletRequest arg0, ServletResponse arg1, FilterChain arg2)
				throws IOException, ServletException {
				System.out.println("doFiler");
				arg2.doFilter(arg0, arg1);//释放拦截
		}
		@Override
		public void init(FilterConfig arg0) throws ServletException {
			System.out.println("FilerInit");//项目启动时调用	
		}
	}

```


#### listener的使用

```

	import javax.servlet.ServletContextEvent;
	import javax.servlet.ServletContextListener;
	public class WebListener implements ServletContextListener{
		@Override
		public void contextDestroyed(ServletContextEvent arg0) {
			System.out.println("destroyListener");//项目关闭是调用
		}
		@Override
		public void contextInitialized(ServletContextEvent arg0) {
			System.out.println("initListener");//项目启动时调用
		}
	}

```

### Bean注册
#### 方法一

```

	servlet  
	     例:@Bean
		public ServletRegistrationBean servletRegistrationBean(){
			return new ServletRegistrationBean(new WebServlet(),"/web/exception2");//构造参数：注册的servlet实例,拦截的servlet请求路径
		}
	filter
	     例:@Bean
	        public FilterRegistrationBean filterRegistrationBean(){
			return new FilterRegistrationBean(new WebFilter(),servletRegistrationBean());//构造参数：注册的Filter实例,默认
		}
	listener
	     例:@Bean
		public ServletListenerRegistrationBean<WebListener> listenerRegistrationBean(){//泛型写注册的监听类名
			return new ServletListenerRegistrationBean<WebListener>(new WebListener());//构造参数：注册的listener实例
		}
```

#### 方法二

```

	在spring boot启动类实现 implements  ServletContextInitializer
	重写
		@Override
		public void onStartup(ServletContext servletContext) throws ServletException {
			servletContext.addServlet("webServlet", new WebServlet()).addMapping("/web/exception2");//参数：servletName,servlet实例   addMapping添加拦截映射
			servletContext.addFilter("webFilter", new WebFilter()).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true, "webServlet");//参数：filterName,filter实例   addMappingForServletNames 添加拦截的servlet  默认全部
			servletContext.addListener(new WebListener()); //参数监听实例
		}
```

#### 方法三

```

	在spring boot启动类加上注解 @ServletComponentScan
	
	servlet类  加上注解 @WebServlet(name="名称",urlPatterns="过滤路径")
	
	filter类  加上注解  @WebFilter(servletNames="过滤的servlet名称"，urlPatterns="过滤路径")
	
	listener类 加上注解 @WebListener

```


### cors 跨域资源共享

#### 方法一  

新建Cors类 加上注解@Configuration

```

	import org.springframework.context.annotation.Bean;
	import org.springframework.context.annotation.Configuration;
	import org.springframework.web.servlet.config.annotation.CorsRegistry;
	import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
	import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
	
	@Configuration
	public class CorsConfiguration {
		@Bean
		public WebMvcConfigurer castCorsConfiguration(){
			return new WebMvcConfigurerAdapter() {
				@Override
				public void addCorsMappings(CorsRegistry registry) {
					registry.addMapping("/web/**").allowedOrigins("http://localhost:8080");//addMapping：允许那些路径可以跨域访问  allowedOrigins：可以不写，默认是所有。  添加则是特定
				}
			};
		}
	}
```

#### 方法二

新建Cors类 加上注解@Configuration
extends  WebMvcConfigurerAdapter
重写addCorsMappings

```
	import org.springframework.context.annotation.Configuration;
	import org.springframework.web.servlet.config.annotation.CorsRegistry;
	import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
	
	@Configuration
	public class CorsConfiguration2 extends WebMvcConfigurerAdapter{
		@Override
		public void addCorsMappings(CorsRegistry registry) {
			registry.addMapping("/web/**").allowedOrigins("http://localhost:8080");//addMapping：允许那些路径可以跨域访问  allowedOrigins：可以不写，默认是所有。  添加则是特定
		}
	}

```

#### 方法三 
在需要的controller的方法上加上注解@CrossOrigin

```

		@CrossOrigin(origins="http://localhost:8080")//允许那些可以跨域请求
		@RequestMapping(value="exception2",method=RequestMethod.GET)//method=RequestMethod.GET需要区分是什么请求
		public Object exception2(){
			throw new RuntimeException("异常处理");//运行时异常
		}
```


### 文件上传
注意文件名保存时避免中文，不然会在liunx下面出现问题。
需求需要原有的文件名称可以在数据库添加相应的字段存储。

springboot文件配置

####默认支持文件上传  
spring.http.multipart.enabled =true  
spring.http.multipart.file-size-threshold =0  
####上传文件的临时目录  
spring.http.multipart.location=E:/upload/temp/  
####最大支持文件大小  
spring.http.multipart.max-file-size =100MB  
####最大支持请求大小  
spring.http.multipart.max-request-size =100Mb 



### 数据库

#### mysql

```

	spring.datasource.url=jdbc:mysql://192.168.0.241:3306/general?characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
	spring.datasource.username=root
	spring.datasource.password=123456
	spring.datasource.driver-class-name=com.mysql.jdbc.Driver
```

### redis主要配置

 包引入
```

 		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
```

默认是数据库0  (select 0)
redis如果连接不上

需要注释掉 redis.conf文件中 #bind 127.0.0.1       liunx ip查看ifconfig -a

还有需要加上redis登录密码

命令 config set requirepass 123456(密码)

```

	spring:		
	 redis:
	  host: 192.168.5.129   redis主机地址
	  password: 123456      密码
	  port: 6379            端口
```

#### redis添加类简单增删改

```

	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.data.redis.core.StringRedisTemplate;
	import org.springframework.data.redis.core.ValueOperations;
	import org.springframework.stereotype.Component;
	
	
	@Component
	public class RoncooRedisComponent {
	
		@Autowired
		private StringRedisTemplate stringRedisTemplate;
	
		public void set(String key, String value) {//新增
			ValueOperations<String, String> ops = this.stringRedisTemplate.opsForValue();
			if (!this.stringRedisTemplate.hasKey(key)) {
				ops.set(key, value);
				System.out.println("set key success");
			} else {
				// 存在则打印之前的value值
				System.out.println("this key = " + ops.get(key));
			}
		}
	
		public String get(String key) {//获取
			return this.stringRedisTemplate.opsForValue().get(key);
		}
	
		public void del(String key) {//删除
			this.stringRedisTemplate.delete(key);
		}
	}
```

### caching 缓存

#### ehCache


 包引入

```

        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
		</dependency>
```

配置文件

```

	spring:
	 cache:
	  type: ehcache
	  ehcache:
	   config: classpath:config/ehcache.xml
```

xml配置文件创建
src/main/resources/下面创建config/ehcache.xml

```

	<?xml version="1.0" encoding="UTF-8"?>  
	<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd">  
	     
	    <diskStore path="java.io.tmpdir/ehcache"/>  
	      
	    <!-- 默认缓存 -->  
	    <defaultCache  
	           maxElementsInMemory="1000"  
	           eternal="false"  
	           timeToIdleSeconds="120"  
	           timeToLiveSeconds="120"  
	           overflowToDisk="false"/>  
	             
	    <!-- 菜单缓存 -->      
	    <cache name="menuCache"   
	           maxElementsInMemory="1000"   
	           eternal="false"  
	           timeToIdleSeconds="120"  
	           timeToLiveSeconds="120"  
	           overflowToDisk="false"   
	           memoryStoreEvictionPolicy="LRU"/>  
	      
	</ehcache>  
```

缓存注解有以下三个：

@Cacheable      @CacheEvict     @CachePut

@Cacheable(value=”accountCache”)，这个注释的意思是，当调用这个方法的时候，会从一个名叫 accountCache 的缓存中查询，如果没有，则执行实际的方法（即查询数据库），并将执行的结果存入缓存中，否则返回缓存中的对象。这里的缓存中的 key 就是参数 userName，value 就是 Account 对象。“accountCache”缓存是在 spring*.xml 中定义的名称。

```

	@Cacheable(value="accountCache")// 使用了一个缓存名叫 accountCache   
	public Account getAccountByName(String userName) {  
	     // 方法内部实现不考虑缓存逻辑，直接实现业务  
	     System.out.println("real query account."+userName);   
	     return getFromDB(userName);   
	} 
	@CacheEvict 注释来标记要清空缓存的方法，当这个方法被调用后，即会清空缓存。注意其中一个 @CacheEvict(value=”accountCache”,key=”#account.getName()”)，其中的 Key 是用来指定缓存的 key 的，这里因为我们保存的时候用的是 account 对象的 name 字段，所以这里还需要从参数 account 对象中获取 name 的值来作为 key，前面的 # 号代表这是一个 SpEL 表达式，此表达式可以遍历方法的参数对象，具体语法可以参考 Spring 的相关文档手册
	
	@CacheEvict(value="accountCache",key="#account.getName()")// 清空accountCache 缓存    
	public void updateAccount(Account account) {  
	     updateDB(account);   
	}   
	    
	@CacheEvict(value="accountCache",allEntries=true)// 清空accountCache 缓存  
	public void reload() {  
	     reloadAll()  
	}  
	  
	@Cacheable(value="accountCache",condition="#userName.length() <=4")// 缓存名叫 accountCache   
	public Account getAccountByName(String userName) {   
	 // 方法内部实现不考虑缓存逻辑，直接实现业务  
	 return getFromDB(userName);   
	}  
	
	@CachePut 注释，这个注释可以确保方法被执行，同时方法的返回值也被记录到缓存中，实现缓存与数据库的同步更新。
	@CachePut(value="accountCache",key="#account.getName()")// 更新accountCache 缓存  
	public Account updateAccount(Account account) {   
	   return updateDB(account);   
	}   

```


### 异步消息服务 JMS与AMQP

#### activemq

官网直接下载解压

bin/win64/activemq.bat 是64位启动文件    启动后，直接浏览器打开控制台

conf/jetty.xml 端口配置

conf/jetty-realm.properties  用户密码配置

conf/activemq.xml  连接ip配置


 包引入

```

		<dependency>
		    <groupId>org.apache.activemq</groupId>
		    <artifactId>activemq-all</artifactId>
		    <version>5.15.3</version>
		</dependency>
```

实例代码

ConnectionFactory

```

	import javax.jms.Connection;
	import javax.jms.JMSException;
	
	import org.apache.activemq.ActiveMQConnectionFactory;
	import org.springframework.stereotype.Component;
	
	
	public class ConnectionFactory {
		public  Connection connection;
	
		public ConnectionFactory() {
			ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory("admin", "admin", "tcp://0.0.0.0:61616");//获取连接工厂  用户名、密码、tcp连接（可在配置文件中找到）
			try {
				this.connection=connectionFactory.createConnection();//获取连接
			} catch (JMSException e) {
				e.printStackTrace();
			}
		}
	}

```

```

	import javax.jms.Connection;
	import javax.jms.DeliveryMode;
	import javax.jms.Destination;
	import javax.jms.JMSException;
	import javax.jms.MapMessage;
	import javax.jms.Message;
	import javax.jms.MessageConsumer;
	import javax.jms.MessageListener;
	import javax.jms.MessageProducer;
	import javax.jms.Session;
	import javax.jms.TextMessage;
	import javax.jms.Topic;
	
	import org.springframework.stereotype.Controller;
	import org.springframework.ui.ModelMap;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.servlet.ModelAndView;
	
	import com.example.demo2.config.ConnectionFactory;
	
	@Controller
	@RequestMapping("/mq")
	public class ActiveMQController {
		@RequestMapping("index")
		public void index(ModelMap mvc){
			Connection connection=new ConnectionFactory().connection;//获取连接
			
			try {
				connection.start();//启动连接
				Session session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);//创建session  是否开启事物、签收模式：自动签收
				Destination destination=session.createQueue("queueName1"); //创建队列  队列名称
				MessageProducer messageProducer=session.createProducer(destination);//创建队列生产者
				messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);//设置是否持久化
				TextMessage textMessage=session.createTextMessage();//创建文本消息
				textMessage.setText("hello,ActiveMQ");//设置文本消息内容
				messageProducer.send(textMessage);//发送
				if(connection!=null){
					connection.close();//关闭连接
					System.out.println("连接已经关闭");
				}
			} catch (JMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return ;
		}
		
		@RequestMapping("index2")
		public String index2(ModelMap mvc){
			Connection connection=new ConnectionFactory().connection;//获取连接
			
			try {
				connection.start();//启动连接
				Session session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);//创建session  是否开启事物、签收模式：自动签收
				Destination destination=session.createQueue("queueName2");//创建队列  队列名称
				MessageProducer messageProducer=session.createProducer(destination);//创建队列生产者
				messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);//设置是否持久化
				MapMessage mapMessage1=session.createMapMessage();//创建map类型消息
				//设置内容
				mapMessage1.setStringProperty("name","zhangsan");
				mapMessage1.setIntProperty("age", 10);
				MapMessage mapMessage2=session.createMapMessage();
				mapMessage2.setStringProperty("name","lisi");
				mapMessage2.setIntProperty("age", 15);
				MapMessage mapMessage3=session.createMapMessage();
				mapMessage3.setStringProperty("name","wangwu");
				mapMessage3.setIntProperty("age", 20);
				messageProducer.send(destination,mapMessage1,DeliveryMode.NON_PERSISTENT,4,1000*6*60);//发送  队列、消息对象、设置是否持久化、消息优先级、有效时间
				messageProducer.send(destination,mapMessage2,DeliveryMode.NON_PERSISTENT,4,1000*6*60);
				messageProducer.send(destination,mapMessage3,DeliveryMode.NON_PERSISTENT,4,1000*6*60);
				if(connection!=null){
					connection.close();//关闭连接
					System.out.println("连接已经关闭");
				}
			} catch (JMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return "index";
		}
		
		@RequestMapping("index3")
		public String index3(ModelMap mvc){
			Connection connection=new ConnectionFactory().connection;//获取连接
			
			try {
				connection.start();//启动连接
				Session session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);//创建session  是否开启事物、签收模式：自动签收
				Destination destination=session.createQueue("queueName2");//创建队列  队列名称
				String condition = "age >= 15";//过滤条件
				MessageConsumer messageConsumer=session.createConsumer(destination,condition);//创建消费者  队列、过滤条件
				MapMessage mapMessage1=(MapMessage) messageConsumer.receive();//消费一条消息，并获取消息对象              
			
				System.out.println(mapMessage1.getStringProperty("name")+":"+mapMessage1.getIntProperty("age"));//根据key获取内容
				mapMessage1.acknowledge();//签收
				//注意只有签收了、才能去获取下一条消息，不然会出问题
				MapMessage mapMessage2=(MapMessage) messageConsumer.receive();
				System.out.println(mapMessage2.getStringProperty("name")+":"+mapMessage2.getIntProperty("age"));
	
				mapMessage2.acknowledge();
				
				if(connection!=null){
					connection.close();//关闭连接
					System.out.println("连接已经关闭");
				}
			} catch (JMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return "index";
		}
		
		@RequestMapping("index4")
		public String index4(ModelMap mvc){
			Connection connection=new ConnectionFactory().connection;//获取连接
			
			try {
				connection.start();//启动连接
				Session session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);//创建session  是否开启事物、签收模式：自动签收
				Destination destination=session.createQueue("queueName2");//创建队列  队列名称
				MessageConsumer messageConsumer=session.createConsumer(destination);//创建消费者  队列
				messageConsumer.setMessageListener(new MessageListener() {//添加队列监听。一但该队列有了消息，他就会自动获取。
					
					@Override
					public void onMessage(Message message) {
						if(message instanceof MapMessage){
						try{
							System.out.println(((MapMessage)message).getStringProperty("name"));
							message.acknowledge();
						}catch(JMSException e){
							e.printStackTrace();
						}
					}else{
						System.out.println("没有消息");
					}
					}
				});
				
	//			if(connection!=null){     记住连接不能关闭。不然无法达到监听的效果
	//				connection.close();
	//				System.out.println("连接已经关闭");
	//			}
			} catch (JMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return "index";
		}
		
		//消息订阅
		@RequestMapping("index5")
		public String index5(ModelMap mvc){
			Connection connection=new ConnectionFactory().connection;//获取连接
			
			try {
				connection.setClientID("consumer1");//创建客户端id，在activemq备案  用于消息订阅。
				connection.start();//启动连接
				Session session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);//创建session  是否开启事物、签收模式：自动签收
				Destination destination=session.createTopic("queueName3");//创建主题对象 主题名称
				MessageConsumer messageConsumer=session.createDurableSubscriber((Topic)destination,"consumer1");//创建消费者  主题对象
				messageConsumer.setMessageListener(new MessageListener() {//创建消息监听
					
					@Override
					public void onMessage(Message message) {
						if(message instanceof MapMessage){
						try{
							System.out.println(((MapMessage)message).getStringProperty("name"));
							message.acknowledge();
						}catch(JMSException e){
							e.printStackTrace();
						}
					}else{
						System.out.println("没有消息");
					}
					}
				});
				
	//			if(connection!=null){   记住连接不能关闭。不然无法达到监听的效果
	//				connection.close();
	//				System.out.println("连接已经关闭");
	//			}
			} catch (JMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return "index";
		}
		@RequestMapping("index6")
		public String index6(ModelMap mvc){
			Connection connection=new ConnectionFactory().connection;//获取连接
			
			try {
				connection.start();//启动连接
				Session session=connection.createSession(Boolean.FALSE, Session.AUTO_ACKNOWLEDGE);
				Destination destination=session.createTopic("queueName3");//创建主题对象 主题名称
				MessageProducer messageProducer=session.createProducer(destination);//创建生产者
				messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);//设置是否持久化
				MapMessage mapMessage1=session.createMapMessage();//创建消息对象
				mapMessage1.setStringProperty("name","zhangsan");
				mapMessage1.setIntProperty("age", 10);
				MapMessage mapMessage2=session.createMapMessage();
				mapMessage2.setStringProperty("name","lisi");
				mapMessage2.setIntProperty("age", 15);
				MapMessage mapMessage3=session.createMapMessage();
				mapMessage3.setStringProperty("name","wangwu");
				mapMessage3.setIntProperty("age", 20);
				messageProducer.send(destination,mapMessage1,DeliveryMode.NON_PERSISTENT,4,1000*6*60);//发送  队列、消息对象、设置是否持久化、消息优先级、有效时间
				messageProducer.send(destination,mapMessage2,DeliveryMode.NON_PERSISTENT,4,1000*6*60);
				messageProducer.send(destination,mapMessage3,DeliveryMode.NON_PERSISTENT,4,1000*6*60);
				if(connection!=null){
					connection.close();//关闭连接
					System.out.println("连接已经关闭");
				}
			} catch (JMSException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return "index";
		}
	}

```

## 后记
这就是spring boot搭建笔记


学无止境。Tomorrow Will Be Better

—— Zhangxs 后记于 2018.0201
