---
layout:     post
title:      "Spring Cloud 微服务架构实战(一)"
subtitle:   "Spring Cloud Eureka 初试"
date:       2018-03-18 16:27:00
author:     "Zhangxs"
header-img: "null.jpg"
catalog: true
tags:
    - 技术
---



## 概述
Spring Cloud 并不是一个具体的框架，大家可以把它理解为一个工具箱，它提供的各类
工具，可以帮助我们快速的构建分布式系统。
Spring Cloud 的各个项目基于 Spring Boot，将 Netflix 的多个框架进行封装，并且通过
自动配置的方式将这些框架绑定到 Spring 的环境中，从而简化了这些框架的使用。由于
Spring Boot 的简便，使得我们在使用 Spring Cloud 时，很容易的将 Netflix 各个框架整合进
我们的项目中。Spring Cloud 下的“Spring Cloud Netflix”模块，主要封装了 Netflix 的以
下项目：

1. Eureka：基于 REST 服务的分布式中间件，主要用于服务管理。
2. Hystrix：容错框架，通过添加延迟阀值以及容错的逻辑，来帮助我们控制分布式系统间组件的交互。
3. Feign：一个 REST 客户端，目的是为了简化 Web Service 客户端的开发
4. Ribbon：负载均衡框架，在微服务集群中为各个客户端的通信提供支持，它主要实现中间层应用程序的负载均衡
5. Zuul：为微服务集群提供过代理、过滤、路由等功能

### Spring Cloud 的主要模块
 
除了 Spring Cloud Netflix 模块外，Spring Cloud 还包括以下几个重要的模块：

1. Spring Cloud Config：为分布式系统提供了配置服务器和配置客户端，通过对它们的配置，可以很好的管理集群中的配置文件。
2. Spring Cloud Sleuth：服务跟踪框架，可以与 Zipkin、Apache HTrace 和 ELK 等数据分析、服务跟踪系统进行整合，为服务跟踪、解决问题提供了便利。
3. Spring Cloud Stream：用于构建消息驱动微服务的框架，该框架在 Spring Boot 的基础上，整合了“Spring Integration”来连接消息代理中间件。
4. Spring Cloud Bus：连接 RabbitMQ、Kafka 等消息代理的集群消息总线。

<p id = "build"></p>
---

## 博文
简介说完了，我们来上第一个模块实现Eureka
Eureka的服务注册与发现
Eureka架构例图:![Alt text](/img/Eureka.png)

1、首先搭建Eureka服务端，提供服务注册
---
 创建maven项目。pom.xml如下。注意spring cloud版本

```

	  <parent>
	  	<groupId>org.springframework.cloud</groupId>  
	    <artifactId>spring-cloud-starter-parent</artifactId>  
	  	<version>Dalston.SR1</version>
	  </parent>
	   
		<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka-server</artifactId>
			</dependency>
		</dependencies>
```

启动类代码。注意@EnableEurekaServer注解

```

	    import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.SpringBootApplication;
		import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
		
		@SpringBootApplication
		@EnableEurekaServer
		public class FirstServerApplication {
			public static void main(String[] args) {
				SpringApplication.run(FirstServerApplication.class,args);
			}
		}
```

.yml配置文件内容 注意因为Eureka自己是服务端但他也会去注册自己。所以要把下面两个参数改为false.不然会报错。

registerWithEureka: false
fetchRegistry: false 

端口默认8761

```

	server:
	  port: 8761
	 
	eureka:
	  client:
	    registerWithEureka: false
	    fetchRegistry: false
```

2、编写服务提供者（客户端）
---
一样的maven项目。pom.xml如下。

```

	  <parent>
	  	<groupId>org.springframework.cloud</groupId>  
	    <artifactId>spring-cloud-starter-parent</artifactId>  
	  	<version>Dalston.SR1</version>
	  </parent>
	
		<dependencies>
		<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-config</artifactId>
			</dependency>
		   <dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-eureka</artifactId>
			</dependency>
		</dependencies>
```

启动类代码。注意@EnableEurekaClient注解

```

	    import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.SpringBootApplication;
		import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
		
		@SpringBootApplication
		@EnableEurekaClient
		public class FirstServerApplication {
			public static void main(String[] args) {
				SpringApplication.run(FirstServerApplication.class,args);
			}
		}
```

.yml配置文件内容。
defaultZone: http://localhost:8761/eureka/ 服务端地址
name: cloud-eureka-cloud 这里是注册的服务name

端口默认80

```

	server:
	  port: 80
	spring:
	  application:
	    name: cloud-eureka-cloud
	    
	eureka:
	  instance:
	    hostname: localhost
	  client:
	    serviceUrl:
	      defaultZone: http://localhost:8761/eureka/
```

编写服务controller

```

		import org.springframework.stereotype.Controller;
		import org.springframework.web.bind.annotation.PathVariable;
		import org.springframework.web.bind.annotation.RequestMapping;
		import org.springframework.web.bind.annotation.RequestMethod;
		import org.springframework.web.bind.annotation.ResponseBody;
		
		@Controller
		public class TestController {
			@RequestMapping(value = "/person/{personId}", method = RequestMethod.GET)
			@ResponseBody
			public String findPerson(@PathVariable("personId") Integer personId) {
				return "张三";
			}
```

3、编写服务调用者
---

新建maven pom.xml

```

	  <parent>
	  	<groupId>org.springframework.cloud</groupId>  
	    <artifactId>spring-cloud-starter-parent</artifactId>  
	  	<version>Dalston.SR1</version>
	  </parent>
	
		<dependencies>
		<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-config</artifactId>
			</dependency>
		   <dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-eureka</artifactId>
			</dependency>
		</dependencies>
```

启动类代码。注意@EnableEurekaClient注解

```

	    import org.springframework.boot.SpringApplication;
		import org.springframework.boot.autoconfigure.SpringBootApplication;
		import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;
		
		@SpringBootApplication
		@EnableEurekaClient
		public class FirstServerApplication {
			public static void main(String[] args) {
				SpringApplication.run(FirstServerApplication.class,args);
			}
		}
```

.yml配置文件内容。
defaultZone: http://localhost:8761/eureka/ 服务端地址
name: cloud-eureka-cloud_invoker 这里是注册的服务name

端口81

```

	server:
	  port: 81
	spring:
	  application:
	    name: cloud-eureka-cloud_invoker
	    
	eureka:
	  instance:
	    hostname: localhost
	  client:
	    serviceUrl:
	      defaultZone: http://localhost:8761/eureka/
```

编写服务调用controller  @LoadBalanced开启负载均衡

```

	@Controller
	@Configuration
	public class InvokerController {
		@Bean
		@LoadBalanced
		public RestTemplate getRestTemplate() {
		return new RestTemplate();
		}
		
		@RequestMapping(value = "/router", method = RequestMethod.GET)
		@ResponseBody
		public String router() {
		RestTemplate restTpl = getRestTemplate();
		// 根据应用名称调用服务
		String json = restTpl.getForObject(
		"http://cloud-eureka-cloud/person/1", String.class);
		return json;
		}
```

4、启动项目 先启动服务端再启动客户端
Eureka控制台:![Alt text](/img/Eureka-1.png)

测试结果:![Alt text](/img/Eureka-2.png)

## 后记
这就是spring cloud 工具之Eureka


学无止境。Tomorrow Will Be Better

—— Zhangxs 后记于 2018.0318
